generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model arse {
  stamp DateTime @default(now()) @db.Timestamp(0)

  in_goal    Int?
  running    Int?
  shooting   Int?
  passing    Int?
  ball_skill Int?
  attacking  Int?
  defending  Int?

  playerId Int
  raterId  Int

  player player @relation("player", fields: [playerId], references: [id])
  rater  player @relation("rater", fields: [raterId], references: [id])

  @@unique([playerId, raterId])
  @@index([playerId])
  @@index([raterId])
}

model club {
  id           Int     @unique(map: "id") @default(autoincrement())
  soccerway_id Int?
  club_name    String? @db.VarChar(255)
  uri          String? @db.VarChar(255)
  country      String? @db.VarChar(255)

  supporters ClubSupporter[]
}

model ClubSupporter {
  playerId Int @default(0)
  clubId   Int @default(0)

  player player @relation(fields: [playerId], references: [id])
  club   club   @relation(fields: [clubId], references: [id])

  @@unique([playerId, clubId])
  @@index([playerId])
  @@index([clubId])
}

model country {
  isoCode String @id @unique(map: "isoCode") @db.VarChar(6)
  name    String @unique(map: "name") @db.VarChar(255)

  supporters CountrySupporter[]
}

model CountrySupporter {
  playerId       Int
  countryISOcode String @db.VarChar(6)

  country country @relation(fields: [countryISOcode], references: [isoCode])
  player  player  @relation(fields: [playerId], references: [id])

  @@unique([playerId, countryISOcode])
  @@index([playerId])
  @@index([countryISOcode])
}

model diffs {
  id               Int      @id @default(autoincrement())
  a                String?  @db.Text
  b                String?  @db.Text
  diff_age         Float?
  diff_unknown_age Int?
  diff_goalies     Int?     @db.TinyInt
  diff_average     Decimal? @db.Decimal(10, 3)
  diff_played      Int?
}

model game_chat {
  id       Int      @id @default(autoincrement())
  game_day Int
  stamp    DateTime @default(now()) @db.Timestamp(0)
  player   Int
  body     String?  @db.MediumText

  @@index([player], map: "player")
}

model game_day {
  game_number          Int       @id
  game_date            DateTime? @db.Date
  game                 Boolean?  @default(true)
  mail_sent            DateTime? @db.DateTime(0)
  comment              String?   @db.VarChar(255)
  bibs                 team?
  picker_games_history Int?
}

model invitation {
  uuid     String @id @db.Char(38)
  player   Int    @default(0)
  game_day Int    @default(0)

  @@index([player], map: "invitation_ibfk_1")
  @@index([game_day], map: "invitation_ibfk_2")
}

model outcome {
  game_day     Int
  player       Int
  response     String?   @db.VarChar(20)
  responsetime DateTime? @db.DateTime(0)
  points       Int?
  team         team?
  comment      String?   @db.VarChar(127)
  pub          Int?      @db.TinyInt
  paid         Boolean?
  goalie       Int?      @db.TinyInt

  @@unique([player, game_day], map: "unique_outcome")
  @@index([game_day], map: "game_day")
  @@index([player, game_day], map: "idx_outcome")
}

model picker {
  player      Int      @id
  player_name String?  @db.VarChar(255)
  age         Int?
  average     Decimal? @db.Decimal(10, 3)
  goalie      Int?     @db.TinyInt
  played      Int?
}

model picker_teams {
  player Int   @unique(map: "player")
  team   team?
}

model player {
  id            Int       @id @default(autoincrement())
  is_admin      Int?      @db.TinyInt
  login         String?   @unique(map: "login") @db.VarChar(16)
  first_name    String?   @db.VarChar(32)
  last_name     String?   @db.VarChar(32)
  email         String?   @db.VarChar(255)
  joined        DateTime? @db.Date
  finished      DateTime? @db.Date
  born          DateTime? @db.Date
  introduced_by Int?
  comment       String?   @db.VarChar(32)
  anonymous     Int?      @db.TinyInt
  goalie        Int?      @db.TinyInt
  mugshot       String?   @db.VarChar(20)

  ratingsOfPlayer arse[]             @relation("player")
  ratingsByPlayer arse[]             @relation("rater")
  clubs           ClubSupporter[]
  countries       CountrySupporter[]
}

model standings {
  player        Int      @default(0)
  table_year    Int
  game_day      Int      @default(0)
  responses     Int?     @default(0)
  P             Int?     @default(0)
  W             Int?     @default(0)
  D             Int?     @default(0)
  L             Int?     @default(0)
  points        Int?     @default(0)
  averages      Decimal? @default(0.000) @db.Decimal(10, 3)
  stalwart      Int?     @default(0)
  pub           Int?     @default(0)
  rank_points   Int?
  rank_averages Int?
  rank_stalwart Int?
  rank_speedy   Int?
  rank_pub      Int?
  speedy        Int?

  @@id([player, table_year, game_day])
  @@index([game_day], map: "standings_ibfk_2")
}

enum team {
  A
  B
}
