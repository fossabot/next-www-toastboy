generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Arse {
  stamp DateTime @default(now()) @db.Timestamp(0)

  in_goal    Int?
  running    Int?
  shooting   Int?
  passing    Int?
  ball_skill Int?
  attacking  Int?
  defending  Int?

  playerId Int
  raterId  Int

  Player Player @relation("player", fields: [playerId], references: [id])
  Rater  Player @relation("rater", fields: [raterId], references: [id])

  @@unique([playerId, raterId])
  @@index([playerId])
  @@index([raterId])
}

model Club {
  id           Int     @unique(map: "id") @default(autoincrement())
  soccerway_id Int?
  club_name    String  @db.VarChar(255)
  uri          String? @db.VarChar(255)
  country      String? @db.VarChar(255)

  Supporters ClubSupporter[]
}

model ClubSupporter {
  playerId Int @default(0)
  clubId   Int @default(0)

  player Player @relation(fields: [playerId], references: [id])
  club   Club   @relation(fields: [clubId], references: [id])

  @@unique([playerId, clubId])
  @@index([playerId])
  @@index([clubId])
}

model Country {
  isoCode String @id @unique(map: "isoCode") @db.VarChar(6)
  name    String @unique(map: "name") @db.VarChar(255)

  Supporters CountrySupporter[]
}

model CountrySupporter {
  playerId       Int
  countryISOcode String @db.VarChar(6)

  country Country @relation(fields: [countryISOcode], references: [isoCode])
  player  Player  @relation(fields: [playerId], references: [id])

  @@unique([playerId, countryISOcode])
  @@index([playerId])
  @@index([countryISOcode])
}

model Diffs {
  id               Int     @id @default(autoincrement())
  a                String? @db.Text
  b                String? @db.Text
  diff_age         Float?
  diff_unknown_age Int?
  diff_goalies     Int?    @db.TinyInt
  diff_average     Float?
  diff_played      Int?
}

model GameChat {
  id       Int      @id @default(autoincrement())
  game_day Int
  stamp    DateTime @default(now()) @db.Timestamp(0)
  player   Int
  body     String?  @db.MediumText

  @@index([player], map: "player")
}

model GameDay {
  id                   Int       @id
  date                 DateTime  @db.Date
  game                 Boolean   @default(true)
  mailSent             DateTime? @db.DateTime(0)
  comment              String?   @db.VarChar(255)
  bibs                 Team?
  picker_games_history Int?

  Outcomes      Outcome[]
  PlayerRecords PlayerRecord[]
}

model Invitation {
  uuid     String @id @db.Char(38)
  player   Int    @default(0)
  game_day Int    @default(0)

  @@index([player], map: "invitation_ibfk_1")
  @@index([game_day], map: "invitation_ibfk_2")
}

model Outcome {
  response         PlayerResponse?
  responseInterval Int?
  points           Int?
  team             Team?
  comment          String?         @db.VarChar(127)
  pub              Int?
  paid             Boolean?
  goalie           Boolean?

  gameDayId Int
  playerId  Int

  gameDay GameDay @relation(fields: [gameDayId], references: [id])
  player  Player  @relation(fields: [playerId], references: [id])

  @@unique([gameDayId, playerId])
  @@index([gameDayId])
  @@index([playerId])
}

model Picker {
  player      Int     @id
  player_name String? @db.VarChar(255)
  age         Int?
  average     Float?
  goalie      Int?    @db.TinyInt
  played      Int?
}

model PickerTeams {
  player Int   @unique(map: "player")
  team   Team?
}

model Player {
  id            Int       @id @default(autoincrement())
  is_admin      Boolean?  @db.TinyInt
  login         String    @unique(map: "login") @db.VarChar(16)
  first_name    String?   @db.VarChar(32)
  last_name     String?   @db.VarChar(32)
  email         String?   @db.VarChar(255)
  joined        DateTime? @db.Date
  finished      DateTime? @db.Date
  born          DateTime? @db.Date
  introduced_by Int?
  comment       String?   @db.VarChar(32)
  anonymous     Boolean?  @db.TinyInt
  goalie        Boolean?  @db.TinyInt

  ArsesOfPlayer Arse[]             @relation("player")
  ArsesByPlayer Arse[]             @relation("rater")
  Clubs         ClubSupporter[]
  Countries     CountrySupporter[]
  Outcomes      Outcome[]
  PlayerRecords PlayerRecord[]
}

model PlayerRecord {
  year          Int
  responses     Int?
  P             Int?
  W             Int?
  D             Int?
  L             Int?
  points        Int?
  averages      Float?
  stalwart      Int?
  pub           Int?
  rank_points   Int?
  rank_averages Int?
  rank_stalwart Int?
  rank_speedy   Int?
  rank_pub      Int?
  speedy        Int?

  playerId  Int
  gameDayId Int

  Player  Player  @relation(fields: [playerId], references: [id])
  GameDay GameDay @relation(fields: [gameDayId], references: [id])

  @@unique([playerId, year, gameDayId])
  @@index([playerId])
  @@index([year])
  @@index([gameDayId])
}

enum Team {
  A
  B
}

enum PlayerResponse {
  Yes
  No
  Dunno
  Excused
  Flaked
  Injured
}
